{"ast":null,"code":"var _jsxFileName = \"/media/matheus-oliveira/Data/Projects/ReactJs/quiz/src/pages/quiz/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport axios from 'axios';\nimport useUSer from '../../utils/useUser';\nimport Question from '../../components/Question';\nimport Results from '../../components/Results';\n\nconst Quiz = ({\n  quiz\n}) => {\n  const {\n    0: quizQuestion,\n    1: setQuizQuestion\n  } = useState([{\n    question: '',\n    answers: {\n      answer_a_correct: \"\",\n      answer_b: \"\",\n      answer_c: \"\",\n      answer_d: \"\",\n      answer_e: \"\",\n      answer_f: \"\"\n    },\n    correct_answers: {\n      answer_a: \"\",\n      answer_b: \"\",\n      answer_c: \"\",\n      answer_d: \"\",\n      answer_e: \"\",\n      answer_f: \"\"\n    }\n  }]);\n  const {\n    0: countQuestion,\n    1: setCountQuestion\n  } = useState(0);\n  const {\n    0: showResults,\n    1: setShowResults\n  } = useState(false);\n  const {\n    user\n  } = useUSer();\n  useEffect(() => {\n    if (!user.name) {\n      return Router.push('/home');\n    }\n\n    ;\n  }, [user]);\n\n  const handleNextQuest = () => {\n    // if (countQuestion < user.dificulty) {\n    const newQuiz = {\n      question: quiz[countQuestion].question,\n      answers: quiz[countQuestion].answers,\n      correct_answers: quiz[countQuestion].correct_answers\n    };\n    console.log('*** Quiz: ' + quiz[countQuestion].question);\n    console.log('*** newQuiz: ' + [newQuiz]);\n    console.log('*** quizQuestion: ' + quizQuestion); // setCountQuestion(prevState => prevState + 1);\n\n    setQuizQuestion(newQuiz); // };\n    // countQuestion < quizQuestion.length - 1\n    //   ?\n    //   (\n    //   )\n    //   :\n    //   (\n    //     setShowResults(true)\n    //   )\n  };\n\n  return __jsx(React.Fragment, null, !showResults ? __jsx(Question, {\n    countQuestion: countQuestion,\n    question: quizQuestion.question,\n    answers: quizQuestion.answers // correct_answers={quizQuestion[countQuestion].correct_answers}\n    ,\n    nextQuestion: handleNextQuest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }) : __jsx(Results, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport async function getStaticProps() {\n  const {\n    data\n  } = await axios.get('https://quizapi.io/api/v1/questions', {\n    headers: {\n      'X-Api-Key': process.env.tokenAPI\n    }\n  });\n  const newQuiz = data.map(quiz => {\n    return {\n      id: quiz.id,\n      question: quiz.question,\n      answers: [{\n        id: 1,\n        quest: quiz.answers.answer_a\n      }, {\n        id: 2,\n        quest: quiz.answers.answer_b\n      }, {\n        id: 3,\n        quest: quiz.answers.answer_c\n      }, {\n        id: 4,\n        quest: quiz.answers.answer_d\n      }, {\n        id: 5,\n        quest: quiz.answers.answer_e\n      }, {\n        id: 6,\n        quest: quiz.answers.answer_f\n      }].filter(answer => answer.quest !== null),\n      correct_answers: quiz.correct_answers,\n      multiple_correct_answers: quiz.multiple_correct_answers,\n      category: quiz.category\n    };\n  });\n  const quiz = newQuiz;\n  return {\n    props: {\n      quiz\n    }\n  };\n}\n;\nexport default Quiz;","map":{"version":3,"sources":["/media/matheus-oliveira/Data/Projects/ReactJs/quiz/src/pages/quiz/index.js"],"names":["React","useState","useEffect","Router","axios","useUSer","Question","Results","Quiz","quiz","quizQuestion","setQuizQuestion","question","answers","answer_a_correct","answer_b","answer_c","answer_d","answer_e","answer_f","correct_answers","answer_a","countQuestion","setCountQuestion","showResults","setShowResults","user","name","push","handleNextQuest","newQuiz","console","log","getStaticProps","data","get","headers","process","env","tokenAPI","map","id","quest","filter","answer","multiple_correct_answers","category","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport axios from 'axios';\n\nimport useUSer from '../../utils/useUser';\n\nimport Question from '../../components/Question';\nimport Results from '../../components/Results';\n\n\n\nconst Quiz = ({ quiz }) => {\n  const [quizQuestion, setQuizQuestion] = useState([{\n\n    question: '',\n    answers: {\n      answer_a_correct: \"\",\n      answer_b: \"\",\n      answer_c: \"\",\n      answer_d: \"\",\n      answer_e: \"\",\n      answer_f: \"\",\n    },\n    correct_answers: {\n      answer_a: \"\",\n      answer_b: \"\",\n      answer_c: \"\",\n      answer_d: \"\",\n      answer_e: \"\",\n      answer_f: \"\",\n    }\n  }]);\n\n  const [countQuestion, setCountQuestion] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n\n  const { user } = useUSer();\n\n  useEffect(() => {\n\n    if (!user.name) {\n\n      return Router.push('/home');\n\n    };\n\n  }, [user]);\n\n  const handleNextQuest = () => {\n    // if (countQuestion < user.dificulty) {\n\n    const newQuiz = {\n\n      question: quiz[countQuestion].question,\n      answers: quiz[countQuestion].answers,\n      correct_answers: quiz[countQuestion].correct_answers\n\n    };\n\n    console.log('*** Quiz: ' + quiz[countQuestion].question);\n    console.log('*** newQuiz: ' + [newQuiz]);\n    console.log('*** quizQuestion: ' + quizQuestion);\n\n\n    // setCountQuestion(prevState => prevState + 1);\n    setQuizQuestion(newQuiz);\n    // };\n\n    // countQuestion < quizQuestion.length - 1\n\n    //   ?\n\n    //   (\n\n    //   )\n\n    //   :\n\n    //   (\n    //     setShowResults(true)\n    //   )\n\n\n  };\n\n  return (\n    <>\n      {/* {console.log(quiz)}\n      \n      {console.log(quizQuestion)} */}\n\n      {!showResults\n        ?\n        (\n\n          <Question\n            countQuestion={countQuestion}\n            question={quizQuestion.question}\n            answers={quizQuestion.answers}\n            // correct_answers={quizQuestion[countQuestion].correct_answers}\n            nextQuestion={handleNextQuest}\n          />\n\n        )\n        :\n        (\n\n          <Results />\n\n        )\n      }\n\n\n\n\n      <div >\n\n\n\n      </div>\n\n    </>\n  );\n};\n\nexport async function getStaticProps() {\n\n\n  const { data } = await axios.get('https://quizapi.io/api/v1/questions', {\n\n\n    headers: { 'X-Api-Key': process.env.tokenAPI },\n\n\n  });\n\n  const newQuiz = data.map(quiz => {\n\n    return {\n\n      id: quiz.id,\n      question: quiz.question,\n      answers: [\n        {\n          id: 1,\n          quest: quiz.answers.answer_a,\n        },\n        {\n          id: 2,\n          quest: quiz.answers.answer_b,\n        },\n        {\n          id: 3,\n          quest: quiz.answers.answer_c,\n        },\n        {\n          id: 4,\n          quest: quiz.answers.answer_d,\n        },\n        {\n          id: 5,\n          quest: quiz.answers.answer_e,\n        },\n        {\n          id: 6,\n          quest: quiz.answers.answer_f,\n        },\n      ].filter(answer => answer.quest !== null),\n      correct_answers: quiz.correct_answers,\n      multiple_correct_answers: quiz.multiple_correct_answers,\n      category: quiz.category,\n\n    }\n  });\n\n\n\n  const quiz = newQuiz;\n\n  return { props: { quiz } };\n};\n\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}