{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/media/matheus-oliveira/Data/Projects/ReactJs/quiz/src/pages/quiz/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport useUSer from '../../utils/useUser';\nimport Question from '../../components/Question';\nimport Results from '../../components/Results';\n\nvar Quiz = function Quiz(_ref) {\n  _s();\n\n  var quiz = _ref.quiz;\n\n  var _useState = useState([{\n    question: '',\n    answers: {\n      answer_a_correct: \"\",\n      answer_b: \"\",\n      answer_c: \"\",\n      answer_d: \"\",\n      answer_e: \"\",\n      answer_f: \"\"\n    },\n    correct_answers: {\n      answer_a: \"\",\n      answer_b: \"\",\n      answer_c: \"\",\n      answer_d: \"\",\n      answer_e: \"\",\n      answer_f: \"\"\n    }\n  }]),\n      quizQuestion = _useState[0],\n      setQuizQuestion = _useState[1];\n\n  var _useState2 = useState(0),\n      countQuestion = _useState2[0],\n      setCountQuestion = _useState2[1];\n\n  var _useState3 = useState(false),\n      showResults = _useState3[0],\n      setShowResults = _useState3[1];\n\n  var _useUSer = useUSer(),\n      user = _useUSer.user;\n\n  useEffect(function () {\n    if (!user.name) {\n      return Router.push('/home');\n    }\n\n    ;\n\n    if (index < user.dificulty) {\n      var newQuiz = {\n        question: quiz.question,\n        answers: quiz.answers,\n        correct_answers: quiz.correct_answers\n      };\n      return setQuizQuestion(newQuiz);\n    }\n\n    ;\n  }, [user]);\n\n  var handleNextQuest = function handleNextQuest() {\n    countQuestion < quizQuestion.length - 1 ? setCountQuestion(function (prevState) {\n      return prevState + 1;\n    }) : setShowResults(true);\n  };\n\n  return __jsx(React.Fragment, null, console.log(quiz), !showResults ? __jsx(Question, {\n    countQuestion: countQuestion,\n    question: quizQuestion[countQuestion].question,\n    answers: [quizQuestion[countQuestion].answers] // correct_answers={quizQuestion[countQuestion].correct_answers}\n    ,\n    nextQuestion: handleNextQuest,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }) : __jsx(Results, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Quiz, \"v/QtxBl7yczYOjDkueU9vTRRQv0=\", false, function () {\n  return [useUSer];\n});\n\n_c = Quiz;\n;\nexport var __N_SSG = true;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/media/matheus-oliveira/Data/Projects/ReactJs/quiz/src/pages/quiz/index.js"],"names":["React","useState","useEffect","Router","useUSer","Question","Results","Quiz","quiz","question","answers","answer_a_correct","answer_b","answer_c","answer_d","answer_e","answer_f","correct_answers","answer_a","quizQuestion","setQuizQuestion","countQuestion","setCountQuestion","showResults","setShowResults","user","name","push","index","dificulty","newQuiz","handleNextQuest","length","prevState","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAGA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,OAAP,MAAoB,0BAApB;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACeP,QAAQ,CAAC,CAAC;AAEhDQ,IAAAA,QAAQ,EAAE,EAFsC;AAGhDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,gBAAgB,EAAE,EADX;AAEPC,MAAAA,QAAQ,EAAE,EAFH;AAGPC,MAAAA,QAAQ,EAAE,EAHH;AAIPC,MAAAA,QAAQ,EAAE,EAJH;AAKPC,MAAAA,QAAQ,EAAE,EALH;AAMPC,MAAAA,QAAQ,EAAE;AANH,KAHuC;AAWhDC,IAAAA,eAAe,EAAE;AACfC,MAAAA,QAAQ,EAAE,EADK;AAEfN,MAAAA,QAAQ,EAAE,EAFK;AAGfC,MAAAA,QAAQ,EAAE,EAHK;AAIfC,MAAAA,QAAQ,EAAE,EAJK;AAKfC,MAAAA,QAAQ,EAAE,EALK;AAMfC,MAAAA,QAAQ,EAAE;AANK;AAX+B,GAAD,CAAD,CADvB;AAAA,MAClBG,YADkB;AAAA,MACJC,eADI;;AAAA,mBAsBiBnB,QAAQ,CAAC,CAAD,CAtBzB;AAAA,MAsBlBoB,aAtBkB;AAAA,MAsBHC,gBAtBG;;AAAA,mBAuBarB,QAAQ,CAAC,KAAD,CAvBrB;AAAA,MAuBlBsB,WAvBkB;AAAA,MAuBLC,cAvBK;;AAAA,iBAyBRpB,OAAO,EAzBC;AAAA,MAyBjBqB,IAzBiB,YAyBjBA,IAzBiB;;AA2BzBvB,EAAAA,SAAS,CAAC,YAAM;AAEd,QAAI,CAACuB,IAAI,CAACC,IAAV,EAAgB;AAEd,aAAOvB,MAAM,CAACwB,IAAP,CAAY,OAAZ,CAAP;AAED;;AAAA;;AAID,QAAIC,KAAK,GAAGH,IAAI,CAACI,SAAjB,EAA4B;AAE1B,UAAMC,OAAO,GAAG;AAEdrB,QAAAA,QAAQ,EAAED,IAAI,CAACC,QAFD;AAGdC,QAAAA,OAAO,EAAEF,IAAI,CAACE,OAHA;AAIdO,QAAAA,eAAe,EAAET,IAAI,CAACS;AAJR,OAAhB;AAOA,aAAOG,eAAe,CAACU,OAAD,CAAtB;AACD;;AAAA;AAIF,GAxBQ,EAwBN,CAACL,IAAD,CAxBM,CAAT;;AA0BA,MAAMM,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAG5BV,IAAAA,aAAa,GAAGF,YAAY,CAACa,MAAb,GAAsB,CAAtC,GAKIV,gBAAgB,CAAC,UAAAW,SAAS;AAAA,aAAIA,SAAS,GAAG,CAAhB;AAAA,KAAV,CALpB,GAWIT,cAAc,CAAC,IAAD,CAXlB;AAeD,GAlBD;;AAoBA,SACE,4BACGU,OAAO,CAACC,GAAR,CAAY3B,IAAZ,CADH,EAGG,CAACe,WAAD,GAIG,MAAC,QAAD;AACE,IAAA,aAAa,EAAEF,aADjB;AAEE,IAAA,QAAQ,EAAEF,YAAY,CAACE,aAAD,CAAZ,CAA4BZ,QAFxC;AAGE,IAAA,OAAO,EAAE,CAACU,YAAY,CAACE,aAAD,CAAZ,CAA4BX,OAA7B,CAHX,CAIE;AAJF;AAKE,IAAA,YAAY,EAAEqB,eALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJH,GAgBG,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBN,EA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BF,CADF;AAoCD,CA7GD;;GAAMxB,I;UAyBaH,O;;;KAzBbG,I;AAsKL;;AAED,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport axios from 'axios';\n\nimport useUSer from '../../utils/useUser';\n\nimport Question from '../../components/Question';\nimport Results from '../../components/Results';\n\n\n\nconst Quiz = ({ quiz }) => {\n  const [quizQuestion, setQuizQuestion] = useState([{\n\n    question: '',\n    answers: {\n      answer_a_correct: \"\",\n      answer_b: \"\",\n      answer_c: \"\",\n      answer_d: \"\",\n      answer_e: \"\",\n      answer_f: \"\",\n    },\n    correct_answers: {\n      answer_a: \"\",\n      answer_b: \"\",\n      answer_c: \"\",\n      answer_d: \"\",\n      answer_e: \"\",\n      answer_f: \"\",\n    }\n  }]);\n\n  const [countQuestion, setCountQuestion] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n\n  const { user } = useUSer();\n\n  useEffect(() => {\n\n    if (!user.name) {\n\n      return Router.push('/home');\n\n    };\n\n\n\n    if (index < user.dificulty) {\n\n      const newQuiz = {\n\n        question: quiz.question,\n        answers: quiz.answers,\n        correct_answers: quiz.correct_answers\n\n      };\n      return setQuizQuestion(newQuiz);\n    };\n\n\n\n  }, [user]);\n\n  const handleNextQuest = () => {\n\n\n    countQuestion < quizQuestion.length - 1\n\n      ?\n\n      (\n        setCountQuestion(prevState => prevState + 1)\n      )\n\n      :\n\n      (\n        setShowResults(true)\n      )\n\n\n  };\n\n  return (\n    <>\n      {console.log(quiz)}\n\n      {!showResults\n        ?\n        (\n\n          <Question\n            countQuestion={countQuestion}\n            question={quizQuestion[countQuestion].question}\n            answers={[quizQuestion[countQuestion].answers]}\n            // correct_answers={quizQuestion[countQuestion].correct_answers}\n            nextQuestion={handleNextQuest}\n          />\n\n        )\n        :\n        (\n\n          <Results />\n\n        )\n      }\n\n\n\n\n      <div >\n\n\n\n      </div>\n\n    </>\n  );\n};\n\nexport async function getStaticProps() {\n\n\n  const { data } = await axios.get('https://quizapi.io/api/v1/questions', {\n\n\n    headers: { 'X-Api-Key': process.env.tokenAPI },\n\n\n  });\n\n  const newQuiz = data.map(quiz => {\n\n    return {\n\n      id: quiz.id,\n      question: quiz.question,\n      answers: [\n        {\n          id: 1,\n          quest: quiz.answers.answer_a,\n        },\n        {\n          id: 2,\n          quest: quiz.answers.answer_b,\n        },\n        {\n          id: 3,\n          quest: quiz.answers.answer_c,\n        },\n        {\n          id: 4,\n          quest: quiz.answers.answer_d,\n        },\n        {\n          id: 5,\n          quest: quiz.answers.answer_e,\n        },\n        {\n          id: 6,\n          quest: quiz.answers.answer_f,\n        },\n      ].filter(answer => answer.quest !== null),\n      correct_answers: quiz.correct_answers,\n      multiple_correct_answers: quiz.multiple_correct_answers,\n      category: quiz.category,\n\n    }\n  });\n\n\n\n  const quiz = newQuiz;\n\n  return { props: { quiz } };\n};\n\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}